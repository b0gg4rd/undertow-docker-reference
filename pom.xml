<?xml version="1.0" encoding="UTF-8"?>
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="
    http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>net.coatli</groupId>
  <artifactId>undertow-docker-reference</artifactId>
  <version>1.0.0-SNAPSHOT</version>
  <packaging>jar</packaging>

  <name>Undertow Docker Reference</name>
  <description>A project reference for Undertow with Docker implementing a microservice</description>

  <properties>
    <java.version>11</java.version>
    <maven>3.6.1</maven>
    <main.class>net.coatli.UndertowDockerReferenceApplication</main.class>

    <project.build.environment>prod</project.build.environment>
    <project.build.resourcesDirectory>${basedir}/src/main/resources</project.build.resourcesDirectory>
    <project.build.testResourcesDirectory>${basedir}/src/test/resources</project.build.testResourcesDirectory>
    <project.build.filterDirectory>${basedir}/src/main/filters</project.build.filterDirectory>

    <project.build.installDirectory>/usr/local/share/coatli</project.build.installDirectory>
    <project.build.logDirectory>/var/log/coatli</project.build.logDirectory>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.build.jdk.source>${java.version}</project.build.jdk.source>
    <project.build.jdk.target>${java.version}</project.build.jdk.target>

    <project.build.ut.skip>true</project.build.ut.skip>

    <properties.maven.plugin.version>1.0.0</properties.maven.plugin.version>
    <editorconfig.maven.plugin.version>0.0.10</editorconfig.maven.plugin.version>
    <lombok.maven.plugin>1.18.10.0</lombok.maven.plugin>
    <liquibase.maven.plugin.version>3.6.3</liquibase.maven.plugin.version>
    <maven.compiler.plugin.version>3.8.0</maven.compiler.plugin.version>
    <maven.surefire.plugin.version>2.22.1</maven.surefire.plugin.version>
    <maven.shade.plugin.version>3.2.1</maven.shade.plugin.version>
    <maven.failsafe.plugin.version>2.22.1</maven.failsafe.plugin.version>
    <docker.maven.plugin.version>0.31.0</docker.maven.plugin.version>
    <mockserver.maven.plugin.version>5.6.0</mockserver.maven.plugin.version>

    <undertow.core.version>2.0.26.Final</undertow.core.version>
    <log4j.version>2.15.0</log4j.version>
    <jsoniter.version>0.9.23</jsoniter.version>
    <javassist.version>3.24.1-GA</javassist.version>
    <hikaricp.version>3.3.1</hikaricp.version>
    <mybatis.version>3.5.1</mybatis.version>
    <hsqldb.version>2.5.0</hsqldb.version>

    <lombok.version>1.18.10</lombok.version>

    <junit.version>4.12</junit.version>

    <liquibase.logging>info</liquibase.logging>
    <liquibase.dropFirst>false</liquibase.dropFirst>
    <liquibase.build.directory>${project.basedir}/src/main/liquibase</liquibase.build.directory>
    <liquibase.properties.file>${project.build.outputDirectory}/liquibase.properties</liquibase.properties.file>

    <docker.image.alias>persons</docker.image.alias>
    <docker.image.name>${project.artifactId}:${project.version}</docker.image.name>
    <docker.image.build.dockerfiledir>${project.basedir}/src/main/docker</docker.image.build.dockerfiledir>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.undertow</groupId>
      <artifactId>undertow-core</artifactId>
      <version>${undertow.core.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-api</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-core</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.jsoniter</groupId>
      <artifactId>jsoniter</artifactId>
      <version>${jsoniter.version}</version>
    </dependency>
    <dependency>
      <groupId>org.javassist</groupId>
      <artifactId>javassist</artifactId>
      <version>${javassist.version}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j-impl</artifactId>
      <version>${log4j.version}</version>
    </dependency>
    <dependency>
      <groupId>com.zaxxer</groupId>
      <artifactId>HikariCP</artifactId>
      <version>${hikaricp.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>${mybatis.version}</version>
    </dependency>
    <dependency>
      <groupId>org.hsqldb</groupId>
      <artifactId>hsqldb</artifactId>
      <version>${hsqldb.version}</version>
    </dependency>

    <!-- Provided -->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Test -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>${junit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <finalName>${project.artifactId}</finalName>

    <resources>
      <resource>
        <directory>${project.build.resourcesDirectory}</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${docker.image.build.dockerfiledir}</directory>
        <filtering>true</filtering>
      </resource>
      <resource>
        <directory>${liquibase.build.directory}</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <testResources>
      <testResource>
        <directory>${project.build.testResourcesDirectory}</directory>
        <filtering>true</filtering>
      </testResource>
    </testResources>
    <filters>
      <filter>${project.build.filterDirectory}/${project.build.environment}.properties</filter>
    </filters>

    <!-- Defining the plugin stack -->
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>${properties.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>read-project-properties</goal>
            </goals>
            <configuration>
              <files>
                <file>${project.build.filterDirectory}/${project.build.environment}.properties</file>
              </files>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.ec4j.maven</groupId>
        <artifactId>editorconfig-maven-plugin</artifactId>
        <version>${editorconfig.maven.plugin.version}</version>
        <executions>
          <execution>
            <phase>initialize</phase>
            <goals>
              <goal>format</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <exclude>mvnw*</exclude>
            <exclude>**/*.swp</exclude>
          </excludes>
          <includes>
            <include>**</include>
          </includes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok-maven-plugin</artifactId>
        <version>${lombok.maven.plugin}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>delombok</goal>
            </goals>
            <configuration>
              <verbose>true</verbose>
              <addOutputDirectory>false</addOutputDirectory>
              <sourceDirectory>src/main/java</sourceDirectory>
              <formatPreferences>
                <pretty />
              </formatPreferences>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-maven-plugin</artifactId>
        <version>${liquibase.maven.plugin.version}</version>
        <configuration>
          <propertyFile>${liquibase.properties.file}</propertyFile>
          <propertyFileWillOverride>true</propertyFileWillOverride>
          <promptOnNonLocalDatabase>false</promptOnNonLocalDatabase>
        </configuration>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>update</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin.version}</version>
        <configuration>
          <source>${project.build.jdk.source}</source>
          <target>${project.build.jdk.target}</target>
          <encoding>${project.build.sourceEncoding}</encoding>
          <failOnWarning>true</failOnWarning>
          <compilerArgs>
            <arg>-Xlint:all,-processing</arg>
          </compilerArgs>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <configuration>
          <skip>${project.build.ut.skip}</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven.failsafe.plugin.version}</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
          <redirectTestOutputToFile>true</redirectTestOutputToFile>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>${maven.shade.plugin.version}</version>
        <configuration>
          <createDependencyReducedPom>false</createDependencyReducedPom>
          <transformers>
            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
              <mainClass>${main.class}</mainClass>
            </transformer>
            <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
              <resources>
                <resource>Dockerfile</resource>
                <resource>changelogs/db.changelog-master.xml</resource>
                <resource>changelogs/db.changelog-model.xml</resource>
                <resource>changelogs/db.changelog-setup.xml</resource>
                <resource>setup/catalogs.csv</resource>
                <resource>liquibase.properties</resource>
                <resource>log4j2-test.xml</resource>
              </resources>
            </transformer>
          </transformers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>${docker.maven.plugin.version}</version>
        <extensions>true</extensions>
        <configuration>
          <images>
            <image>
              <registry>${docker.image.registry}</registry>
              <name>${docker.image.name}</name>
              <build>
                <dockerFileDir>${docker.image.build.dockerfiledir}</dockerFileDir>
                <assembly>
                  <name>artifact</name>
                  <descriptorRef>artifact</descriptorRef>
                </assembly>
              </build>
            </image>
          </images>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.mock-server</groupId>
        <artifactId>mockserver-maven-plugin</artifactId>
        <version>${mockserver.maven.plugin.version}</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>local</id>

      <properties>
        <project.build.environment>local</project.build.environment>
      </properties>

      <build>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${docker.maven.plugin.version}</version>
            <extensions>true</extensions>
            <configuration>
              <images>
                <image>
                  <alias>${docker.image.alias}</alias>
                  <registry>${docker.image.registry}</registry>
                  <name>${docker.image.name}</name>
                  <build>
                    <dockerFileDir>${docker.image.build.dockerfiledir}</dockerFileDir>
                    <assembly>
                      <name>artifact</name>
                      <descriptorRef>artifact</descriptorRef>
                    </assembly>
                  </build>
                  <run>
                    <containerNamePattern>%a</containerNamePattern>
                    <log>
                      <prefix>%z</prefix>
                      <date>DEFAULT</date>
                      <file>/tmp/${docker.image.alias}.log</file>
                    </log>
                    <net>host</net>
                    <volumes>
                      <bind>
                        <volume>${project.build.logDirectory}:${project.build.logDirectory}</volume>
                      </bind>
                    </volumes>
                    <wait>
                      <time>4000</time>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start-container</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>build</goal>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-container</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.mock-server</groupId>
            <artifactId>mockserver-maven-plugin</artifactId>
            <version>${mockserver.maven.plugin.version}</version>
            <configuration>
              <serverPort>7001</serverPort>
              <logLevel>WARN</logLevel>
              <initializationJson>mockserver/expectations.json</initializationJson>
            </configuration>
            <executions>
              <execution>
                <id>start-mockserver</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop-mockserver</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>dev</id>

      <properties>
        <project.build.environment>dev</project.build.environment>
      </properties>
    </profile>

    <profile>
      <id>prod</id>

      <properties>
        <project.build.environment>prod</project.build.environment>
      </properties>
    </profile>
  </profiles>

</project>
